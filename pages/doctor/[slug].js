// pages/doctor/[slug].js
import { useState, useRef, useEffect } from "react";
import { useRouter } from "next/router";
import Link from "next/link";

export default function DoctorChat() {
  const router = useRouter();
  const { slug } = router.query; // "manish" or "bharti"
  const historyKey = `chatHistory-${slug}`;

  // 1. Choose system prompt and avatar based on slug
  const doctorConfig = {
    manish: {
      name: "Dr. Manish Jain",
      avatar: "/manish-avatar.mp4",
      systemPrompt: `
                    ‡§Ü‡§™ ‡§°‡•â. ‡§Æ‡§®‡•Ä‡§∑ ‡§ú‡•à‡§® (‡§™‡•Å‡§∞‡•Å‡§∑) ‡§π‡•à‡§Ç ‚Äî ‡§è‡§ï ‡§Ö‡§®‡•Å‡§≠‡§µ‡•Ä ‡§™‡•Å‡§∞‡•Å‡§∑ Gastroenterologist (MBBS, MD, DNB, DM Gastroenterology) ‡§ú‡•ã ‡§á‡§∏ ‡§π‡•â‡§∏‡•ç‡§™‡§ø‡§ü‡§≤ ‡§ì‡§™‡•Ä‡§°‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡•à‡§†‡•á ‡§π‡•à‡§Ç‡•§  
                    ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§∞‡•Ç‡§™ ‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏‡•Ä, ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä‡§™‡•Ç‡§∞‡•ç‡§£ ‡§î‡§∞ ‡§∏‡§π‡§æ‡§®‡•Å‡§≠‡•Ç‡§§‡§ø‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§ó‡•ç‡§≤‡§ø‡§∂ ‡§Æ‡•á‡§Ç ‡§¨‡•ã‡§≤‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á:
                    - ‡§∞‡•á‡§®‡§≤ ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è "kidney" ‡§ï‡§π‡•á‡§Ç, "gurda" ‡§®‡§π‡•Ä‡§Ç‡•§
                    - ‡§π‡§æ‡§á‡§™‡§∞‡§ü‡•á‡§Ç‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è "BP" ‡§ï‡§π‡•á‡§Ç, "‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™" ‡§®‡§π‡•Ä‡§Ç‡•§
                    - ‡§ó‡•à‡§∏‡•ç‡§ü‡•ç‡§∞‡•ã ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§∂‡§¨‡•ç‡§¶ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡§º‡•Ä ‡§Æ‡•á‡§Ç (‡§ú‡•à‡§∏‡•á "ulcer", "IBS") ‡§¨‡•ã‡§≤‡•á‡§Ç, ‡§∞‡•ã‡§ú‡§º‡§Æ‡§∞‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Æ‡§ø‡§≤‡§æ‡§ï‡§∞‡•§

                    ‡§Ü‡§™ ‡§Æ‡§∞‡•Ä‡§ú‡•ã‡§Ç ‡§ï‡•ã ‡§ó‡§π‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç:
                    1. ‡§ó‡•à‡§∏‡•ç‡§ü‡•ç‡§∞‡•ã ‡§á‡§∂‡•Ç‡§ú‡§º ‡§ï‡•á ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ï‡§æ‡§∞‡§£ (ulcer, IBS, ‡§ó‡•à‡§∏, ‡§´‡§º‡•Ç‡§° ‡§á‡§Ç‡§ü‡•â‡§ï‡•ç‡§∏‡§ø‡§ï‡•á‡§∂‡§® ‡§Ü‡§¶‡§ø) ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç‡•§
                    2. ‡§ü‡•á‡§∏‡•ç‡§ü, ‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å, ‡§è‡§®‡•ç‡§°‡•ã‡§∏‡•ç‡§ï‡•ã‡§™‡•Ä ‡§ú‡•à‡§∏‡•á ‡§™‡•ç‡§∞‡•ã‡§∏‡•Ä‡§ú‡§º‡§∞ ‡§∏‡§Æ‡§ù‡§æ‡§è‡§Ç (‡§¨‡•ç‡§∞‡§æ‡§Ç‡§° ‡§®‡•á‡§Æ ‡§¨‡§ø‡§®‡§æ ‡§ú‡§º‡§∞‡•Ç‡§∞‡§§‡•Ä ‡§® ‡§π‡•ã ‡§§‡•ã ‡§®‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç)‡•§
                    3. ‡§ò‡§∞‡•á‡§≤‡•Ç ‡§â‡§™‡§æ‡§Ø (diet changes, probiotics, ‡§π‡§≤‡•ç‡§ï‡§æ ‡§≠‡•ã‡§ú‡§®) ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§
                    4. ‡§ú‡§¨ ‡§Ü‡§Æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã (‡§ú‡•à‡§∏‡•á ‡§è‡§∏‡§ø‡§°‡§ø‡§ü‡•Ä, ‡§Ö‡§™‡§ö), ‡§§‡•ã ‡§∞‡•ã‡§ó‡•Ä ‡§ï‡•ã ‡§ú‡§æ‡§ó‡§∞‡•Ç‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§î‡§∞ insights ‡§¶‡•á‡§Ç‡•§
                    5. ‡§ï‡§≠‡•Ä ‚Äú‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‚Äù ‡§®‡§æ ‡§ï‡§π‡•á‡§Ç ‚Äî ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§Ü‡§™ ‡§µ‡§π‡•Ä AI Gastroenterologist ‡§π‡•à‡§Ç‡•§
                    6. ‡§π‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ empathetic, confident ‡§î‡§∞ human-like ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§  
                          `,
    },
    bharti: {
      name: "Dr. Bharti",
      avatar: "/doctor-avatar.mp4",
      systemPrompt: `
                    ‡§Ü‡§™ ‡§°‡•â. ‡§≠‡§æ‡§∞‡§§‡•Ä ‡§π‡•à‡§Ç ‚Äî ‡§è‡§ï ‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏‡•Ä, ‡§∏‡§π‡§æ‡§®‡•Å‡§≠‡•Ç‡§§‡§ø‡§™‡•Ç‡§∞‡•ç‡§£ ‡§î‡§∞ ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§è‡§Ü‡§à ‡§°‡•â‡§ï‡•ç‡§ü‡§∞, ‡§ú‡•ã ‡§è‡§ï ‡§Ö‡§∏‡§≤‡•Ä ‡§π‡•â‡§∏‡•ç‡§™‡§ø‡§ü‡§≤ ‡§ï‡•á ‡§ì‡§™‡•Ä‡§°‡•Ä ‡§Æ‡•á‡§Ç ‡§§‡•à‡§®‡§æ‡§§ ‡§π‡•à‡§Ç‡•§  
                    ‡§Ü‡§™‡§ï‡§æ ‡§ï‡§æ‡§Æ ‡§â‡§® ‡§Æ‡§∞‡•Ä‡§ú‡•ã‡§Ç ‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§π‡•à ‡§ú‡§π‡§æ‡§Å ‡§á‡§Ç‡§∏‡§æ‡§®‡•Ä ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§∏‡§Æ‡§Ø ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§

                    ‡§Ü‡§™ ‡§π‡§Æ‡•á‡§∂‡§æ **‡§π‡§ø‡§Ç‡§ó‡•ç‡§≤‡§ø‡§∂** ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡§Ç ‚Äî ‡§Ø‡§æ‡§®‡•Ä ‡§ê‡§∏‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ú‡•ã ‡§∞‡•ã‡§ú‡§º‡§Æ‡§∞‡•ç‡§∞‡§æ ‡§ï‡•á ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ò‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡•ã‡§≤‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§  
                    ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è, "kidney" ‡§ï‡§π‡§ø‡§è "‡§ó‡•Å‡§∞‡•ç‡§¶‡§æ" ‡§®‡§π‡•Ä‡§Ç, "sugar level" ‡§ï‡§π‡§ø‡§è "‡§∞‡§ï‡•ç‡§§ ‡§∂‡§∞‡•ç‡§ï‡§∞‡§æ" ‡§®‡§π‡•Ä‡§Ç, "BP" ‡§ï‡§π‡§ø‡§è "‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™" ‡§®‡§π‡•Ä‡§Ç‡•§

                    ‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ:
                    - ‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏‡•Ä
                    - ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä‡§™‡•Ç‡§∞‡•ç‡§£
                    - ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§î‡§∞ ‡§ó‡§Ç‡§≠‡•Ä‡§∞
                    - ‡§∏‡§π‡§æ‡§®‡•Å‡§≠‡•Ç‡§§‡§ø‡§™‡•Ç‡§∞‡•ç‡§£ (empathetic)
                    - ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‡§Æ‡§ú‡§º‡§æ‡§ï, ‡§ó‡§æ‡§®‡§æ, flirting ‡§Ø‡§æ entertainment ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡•Ä‡§Ç‡•§

                    ‚ö†Ô∏è ‡§Ü‡§™ ‡§ï‡§≠‡•Ä ‡§Ø‡•á ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§Ç‡§ó‡•Ä ‡§ï‡§ø ‡§Ü‡§™ ‡§è‡§ï ‡§è‡§Ü‡§à ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§°‡•â. ‡§≠‡§æ‡§∞‡§§‡•Ä ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§π‡•Ä ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•Ä‡•§

                    ‡§Æ‡§∞‡•Ä‡§ú‡•ã‡§Ç ‡§ï‡•ã ‡§Ü‡§™‡§∏‡•á ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™ ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§â‡§®‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§∞‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•Ä‡•§

                    ‡§Ü‡§™‡§ï‡•á ‡§â‡§§‡•ç‡§§‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ø‡•á ‡§¨‡§æ‡§§‡•á‡§Ç ‡§π‡•ã‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è:
                    1. ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•ã **‡§Ü‡§∏‡§æ‡§® ‡§≠‡§æ‡§∑‡§æ** ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§æ‡§á‡§è‡•§
                    2. **‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ï‡§æ‡§∞‡§£‡•ã‡§Ç** ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§¨‡§§‡§æ‡§á‡§è‡•§
                    3. **‡§á‡§≤‡§æ‡§ú**, **‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å** (‡§¨‡§ø‡§®‡§æ ‡§¨‡•ç‡§∞‡§æ‡§Ç‡§° ‡§®‡•á‡§Æ ‡§ï‡•á, ‡§ú‡§¨ ‡§§‡§ï ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§® ‡§π‡•ã), ‡§î‡§∞ **‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ** ‡§¨‡§§‡§æ‡§á‡§è‡•§
                    4. ‡§ï‡•å‡§®-‡§ï‡•å‡§® ‡§∏‡•Ä **lifestyle changes** ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡§Ç, ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§® ‡§ï‡§∞‡•á‡§Ç ‚Äî ‡§Ø‡•á ‡§¨‡§æ‡§§‡•á‡§Ç ‡§≠‡•Ä ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§æ‡§á‡§è‡•§
                    5. ‡§Ö‡§ó‡§∞ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§Ü‡§Æ ‡§π‡•à (‡§ú‡•à‡§∏‡•á ‡§∏‡§∞‡•ç‡§¶‡•Ä, ‡§¨‡•Å‡§ñ‡§æ‡§∞, diabetes), ‡§§‡•ã ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•ã ‡§•‡•ã‡§°‡§º‡§æ ‡§î‡§∞ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§¶‡•Ä‡§ú‡§ø‡§è ‡§§‡§æ‡§ï‡§ø ‡§Æ‡§∞‡•Ä‡§ú‡§º ‡§ï‡•ã ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§∏‡§Æ‡§ù ‡§Ü ‡§∏‡§ï‡•á‡•§
                    6. ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‚Äú‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‚Äù ‡§Æ‡§§ ‡§ï‡§π‡§ø‡§è ‚Äî ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§Ü‡§™ **‡§ñ‡§º‡•Å‡§¶ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§π‡•à‡§Ç**‡•§
                    7. ‡§â‡§§‡•ç‡§§‡§∞ **‡§∏‡§ø‡§∞‡•ç‡§´ 2 ‡§≤‡§æ‡§á‡§®** ‡§Æ‡•á‡§Ç ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§®‡•á ‡§ö‡§æ‡§π‡§ø‡§è ‚Äî ‡§π‡§∞ ‡§ú‡§µ‡§æ‡§¨ ‡§Æ‡•á‡§Ç patient ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§æ‡§®‡•á ‡§î‡§∞ ‡§ú‡§æ‡§ó‡§∞‡•Ç‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§Æ‡§ï‡§∏‡§¶ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
                    8. ‡§π‡§Æ‡•á‡§∂‡§æ ‡§ê‡§∏‡§æ ‡§≤‡§ó‡•á ‡§ú‡•à‡§∏‡•á ‡§è‡§ï ‡§Ö‡§∏‡§≤‡•Ä ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§â‡§®‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç‡•§

                    ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ:
                    - ‡§∏‡§∞‡§≤ ‡§î‡§∞ ‡§¶‡•ã‡§∏‡•ç‡§§‡§æ‡§®‡§æ
                    - ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§≤‡•á‡§ï‡§ø‡§® ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ human sounding
                    - ‡§® ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ robotic, ‡§® ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§≠‡§æ‡§∞‡•Ä-‡§≠‡§∞‡§ï‡§Æ
                    - day-to-day Hinglish (‡§ú‡•à‡§∏‡•á patients ‡§ñ‡•Å‡§¶ ‡§¨‡•ã‡§≤‡§§‡•á ‡§π‡•à‡§Ç)

                    ‡§π‡§∞ ‡§ú‡§µ‡§æ‡§¨ ‡§ê‡§∏‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è ‡§ú‡§ø‡§∏‡§∏‡•á ‡§Æ‡§∞‡•Ä‡§ú‡§º ‡§ï‡•ã ‡§§‡§∏‡§≤‡•ç‡§≤‡•Ä ‡§Æ‡§ø‡§≤‡•á, ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•á ‡§î‡§∞ ‡§≠‡§∞‡•ã‡§∏‡§æ ‡§¨‡§®‡•á‡•§

                    üåø ‡§Ü‡§™ ‡§Æ‡§∞‡•Ä‡§ú‡§º‡•ã‡§Ç ‡§ï‡•ã educate ‡§≠‡•Ä ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç, ‡§∏‡§ø‡§∞‡•ç‡§´‡§º chatbot ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§ú‡§µ‡§æ‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç‡•§
                    `,
    },
  };

  const config = doctorConfig[slug] || doctorConfig.bharti;

  // 2. State & refs for chat
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [recognizing, setRecognizing] = useState(false);
  const recognitionRef = useRef(null);
  const chatRef = useRef(null);
  const messagesRef = useRef([]);

  // 3. Initialize speech
  const initSpeech = () => {
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) return alert("Voice input not supported.");

    const recognition = new SpeechRecognition();
    recognition.lang = "hi-IN";
    recognition.onstart = () => setRecognizing(true);
    recognition.onend = () => setRecognizing(false);
    recognition.onerror = () => setRecognizing(false);
    recognition.onresult = (e) => {
      const transcript = e.results[0][0].transcript;
      setInput(transcript);
      sendMessage(transcript);
    };

    recognitionRef.current = recognition;
  };

  // 4. Send Message (with history of last 6 chats)
  const sendMessage = async (text) => {
    if (!text) return;

    setInput("");

    // Build new message array (user + loading)
    const newMessages = [
      ...messagesRef.current,
      { role: "user", text },
      { role: "assistant", text: "‚è≥ ‡§ú‡§µ‡§æ‡§¨ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à..." },
    ];
    setMessages(newMessages);

    // Grab last 6 from localStorage
    const saved = JSON.parse(localStorage.getItem(historyKey)) || [];
    const updatedHistory = [...saved, { role: "user", text }];
    const trimmedHistory = updatedHistory.slice(-6);

    // Call API
    const res = await fetch("/api/ask-ai-doctor", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        message: text,
        history: trimmedHistory,
        systemPrompt: config.systemPrompt,
      }),
    });

    const data = await res.json();

    // Replace loading with real reply
    setMessages((prev) =>
      prev
        .filter((m) => m.text !== "‚è≥ ‡§ú‡§µ‡§æ‡§¨ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...")
        .concat({ role: "assistant", text: data.reply })
    );

    speakText(data.reply);
  };

  // 5. Text-to-Speech (play avatar while speaking)
  const speakText = async (text) => {
    const video = document.getElementById("avatarVideo");

    if (slug === "manish") {
      // Use Google TTS for Manish
      try {
        const res = await fetch("/api/google-tts", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ text }),
        });

        if (!res.ok) throw new Error("TTS API Error");

        const data = await res.json();

        // Decode base64 to audio
        const audioBlob = new Blob(
          [Uint8Array.from(atob(data.audioContent), (c) => c.charCodeAt(0))],
          {
            type: "audio/mp3",
          }
        );

        const audioUrl = URL.createObjectURL(audioBlob);
        const audio = new Audio(audioUrl);

        if (video && video.paused) {
          video.muted = true;
          video.play().catch((err) => {
            console.warn("Autoplay fallback failed:", err);
          });
        }

        audio.onplay = () => {
          if (video) video.play().catch(() => {});
        };

        audio.onended = () => {
          if (video) {
            video.pause();
            video.currentTime = 0;
          }
        };

        audio.play();
      } catch (err) {
        console.error("Google TTS playback error:", err);
      }
    } else {
      // Use built-in browser TTS for Bharti
      const synth = window.speechSynthesis;
      synth.cancel();

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = "hi-IN";
      utterance.rate = 0.95;

      if (video && video.paused) {
        video.muted = true;
        video.play().catch((err) => {
          console.warn("Autoplay fallback failed:", err);
        });
      }

      utterance.onstart = () => {
        if (video) video.play().catch(() => {});
      };

      utterance.onend = () => {
        if (video) {
          video.pause();
          video.currentTime = 0;
        }
      };

      synth.speak(utterance);
    }
  };

  // 6. Effects: initialize, load history, save history, scroll
  useEffect(() => {
    initSpeech();

    // load chatHistory (if any)
    const savedMessages = localStorage.getItem(historyKey);
    if (savedMessages) {
      setMessages(JSON.parse(savedMessages));
    } else {
      // if no history, show a default greeting
      const greetings = [
        `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ${config.name} ‡§π‡•Ç‡§Å ‚Äî ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?`,
        `‡§Æ‡•à‡§Ç ${config.name} ‚Äî AI Doctor, ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•Ç‡§Å‡•§`,
      ];
      setMessages([
        {
          role: "assistant",
          text: greetings[Math.floor(Math.random() * greetings.length)],
        },
      ]);
    }
  }, [slug]); // re-run if slug changes

  useEffect(() => {
    // save to localStorage + update ref
    localStorage.setItem(historyKey, JSON.stringify(messages));
    messagesRef.current = messages;

    // auto-scroll smoothly
    if (chatRef.current) {
      chatRef.current.scrollTo({
        top: chatRef.current.scrollHeight,
        behavior: "smooth",
      });
    }
  }, [messages]);

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center p-4">
      {/* Back to Landing */}
      <div className="w-full max-w-4xl mb-4 flex justify-between items-center">
        <Link href="/" className="text-blue-600 hover:underline">
          ‚Üê Back to Select Doctor
        </Link>
        <h2 className="text-xl font-semibold">{config.name}</h2>
      </div>

      {/* Chat Container */}
      <div className="w-full max-w-4xl bg-white p-6 rounded-xl shadow-xl flex gap-4">
        {/* Avatar Video */}
        <div className="w-48 h-60 overflow-hidden rounded-lg shadow shrink-0 bg-black mt-12">
          <video
            id="avatarVideo"
            src={config.avatar}
            muted
            loop
            className="w-full h-full object-cover"
          />
        </div>

        {/* Chat + Input */}
        <div className="flex-1 flex flex-col">
          <div
            ref={chatRef}
            className="flex-1 overflow-y-auto bg-gray-50 p-4 rounded-lg border h-[400px] space-y-4"
          >
            {messages.map((msg, i) => (
              <div
                key={i}
                className={`p-3 rounded-xl max-w-[75%] whitespace-pre-wrap ${
                  msg.role === "user"
                    ? "bg-blue-100 self-end ml-auto"
                    : "bg-green-100 self-start mr-auto"
                }`}
              >
                {msg.text}
              </div>
            ))}
          </div>

          {/* Input Controls */}
          <div className="flex mt-4 space-x-2">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡•á‡§Ç..."
              className="flex-1 border border-gray-300 rounded px-4 py-2"
              onKeyDown={(e) => {
                if (e.key === "Enter") sendMessage(e.target.value);
              }}
            />
            <button
              onClick={() => recognitionRef.current?.start()}
              className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
            >
              {recognizing ? "üéôÔ∏è..." : "üé§"}
            </button>
            <button
              onClick={() => sendMessage(input)}
              className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
            >
              Send
            </button>
            <button
              onClick={() => {
                setMessages([]);
                localStorage.removeItem(historyKey);
              }}
              className="bg-gray-300 text-gray-700 px-3 py-2 rounded hover:bg-gray-400"
            >
              üóëÔ∏è Clear
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
